"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[734],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,h=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},60:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="The Command Pattern",s={unversionedId:"design-patterns/behavioral/CommandPattern",id:"design-patterns/behavioral/CommandPattern",title:"The Command Pattern",description:"C++ Project Example",source:"@site/docs/1-design-patterns/behavioral/CommandPattern.md",sourceDirName:"1-design-patterns/behavioral",slug:"/design-patterns/behavioral/CommandPattern",permalink:"/notes/docs/design-patterns/behavioral/CommandPattern",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-design-patterns/behavioral/CommandPattern.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Behavioral Patterns",permalink:"/notes/docs/design-patterns/behavioral/"},next:{title:"The Observer Pattern",permalink:"/notes/docs/design-patterns/behavioral/ObserverPattern"}},c={},l=[{value:"C++ Project Example",id:"c-project-example",level:2},{value:"Theory",id:"theory",level:2},{value:"Class Diagram",id:"class-diagram",level:2}],m={toc:l};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-command-pattern"},"The Command Pattern"),(0,a.kt)("h2",{id:"c-project-example"},"C++ Project Example"),(0,a.kt)("p",null,"Link: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/akormous/design-patterns/tree/main/Code/CommandPattern/"},"Remote Control")),(0,a.kt)("h2",{id:"theory"},"Theory"),(0,a.kt)("p",null,"This pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Command Pattern Basic architecture",src:n(5995).Z,width:"1000",height:"938"})),(0,a.kt)("h2",{id:"class-diagram"},"Class Diagram"),(0,a.kt)("mermaid",{value:"classDiagram\n\nclass Client\nclass Invoker {\n    setCommand()\n}\n\nclass Command {\n    <<interface>>\n    execute()\n    undo()\n}\n\nclass ConcreteCommand {\n    execute()\n    undo()\n}\nclass Receiver {\n    action()\n}\n\nConcreteCommand ..> Command\nInvoker --\x3e Command\nClient --\x3e Receiver\nClient --\x3e ConcreteCommand\nConcreteCommand --\x3e Receiver"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Command declares an interface for all commands, it has an execute() and undo() method"),(0,a.kt)("li",{parentName:"ul"},"The execute() method of a ConcreteCommand eventually calls the action() of Receiver"),(0,a.kt)("li",{parentName:"ul"},"The ConcreteCommand defines a binding between an action and a receiver"),(0,a.kt)("li",{parentName:"ul"},"The Client is responsible for creating a ConcreteCommand and setting its Receiver"),(0,a.kt)("li",{parentName:"ul"},"The Invoker holds a command and at some point asks the command to call its execute() method"),(0,a.kt)("li",{parentName:"ul"},"The Receiver knows how to perform the work needed to carry out the request"),(0,a.kt)("li",{parentName:"ul"},"The Invoker of the request and the Receiver of the request are decoupled")))}d.isMDXComponent=!0},5995:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/CommandPatternBasic-a2e51d57508b7a7486df3bd09745f231.png"}}]);