"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[5130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),i=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=i(n),y=a,d=p["".concat(l,".").concat(y)]||p[y]||m[y]||o;return n?r.createElement(d,c(c({ref:t},u),{},{components:n})):r.createElement(d,c({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4253:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const o={},c="The Strategy Pattern",s={unversionedId:"design-patterns/structural/StrategyPattern",id:"design-patterns/structural/StrategyPattern",title:"The Strategy Pattern",description:"C++ Project Example",source:"@site/docs/1-design-patterns/structural/StrategyPattern.md",sourceDirName:"1-design-patterns/structural",slug:"/design-patterns/structural/StrategyPattern",permalink:"/notes/docs/design-patterns/structural/StrategyPattern",draft:!1,editUrl:"https://github.com/akormous/notes/edit/master/docs/1-design-patterns/structural/StrategyPattern.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Facade Pattern",permalink:"/notes/docs/design-patterns/structural/FacadePattern"},next:{title:"Data Structures and Algorithms",permalink:"/notes/docs/dsa/"}},l={},i=[{value:"C++ Project Example",id:"c-project-example",level:2},{value:"Theory",id:"theory",level:2},{value:"Some key points to remember",id:"some-key-points-to-remember",level:2}],u={toc:i};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-strategy-pattern"},"The Strategy Pattern"),(0,a.kt)("h2",{id:"c-project-example"},"C++ Project Example"),(0,a.kt)("p",null,"Link: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/akormous/design-patterns/tree/main/Code/StrategyPattern/"},"Duck Simulator")),(0,a.kt)("h2",{id:"theory"},"Theory"),(0,a.kt)("p",null,"It defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from the clients that use it."),(0,a.kt)("p",null,"For example, in the below diagram, the behavior classes (FlyBehavior and QuackBehavior) can vary independently from the Duck class."),(0,a.kt)("h2",{id:"some-key-points-to-remember"},"Some key points to remember"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Identify the aspects of your application that vary and separate them from what stays the same"),(0,a.kt)("li",{parentName:"ul"},"Program to an interface, not an implementation"),(0,a.kt)("li",{parentName:"ul"},"Favor composition over inheritance")),(0,a.kt)("mermaid",{value:'classDiagram\n\nDuck <|-- MallardDuck \nDuck <|-- RedheadDuck\nDuck <|-- RubberDuck\nDuck <|-- DecoyDuck\n\nDuck --\x3e FlyBehavior\nDuck --\x3e QuackBehavior\n\nclass Duck {\n  +FlyBehavior fb\n  +QuackBehavior qb\n  +swim()\n  +display()\n  +setFlyBehavior()\n  +setQuackBehavior()\n  +performFly()\n  +performQuack()\n}\nclass MallardDuck {\n  +display()\n}\nclass RedheadDuck {\n  +display()\n}\nclass RubberDuck {\n  +display()\n}\nclass DecoyDuck {\n  +display()\n}\n\nclass FlyBehavior {\n  <<interface>>\n  +fly()\n}\nclass FlyWithWings {\n  +fly()\n}\nclass FlyNoWay {\n  +fly()\n}\nFlyBehavior <|.. "implements" FlyWithWings\nFlyBehavior <|.. "implements" FlyNoWay\n\nclass QuackBehavior {\n  <<interface>>\n  +quack()\n}\nclass Quack {\n  +quack()\n}\nclass Squeak {\n  +quack()\n}\nclass MuteQuack {\n  +quack()\n}\n\nQuackBehavior <|.. "implements" Quack\nQuackBehavior <|.. "implements" Squeak\nQuackBehavior <|.. "implements" MuteQuack\n'}))}p.isMDXComponent=!0}}]);