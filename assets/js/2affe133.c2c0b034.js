"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[8008],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3474:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={},o="Kubernetes",i={unversionedId:"docker-kubernetes/Kubernetes",id:"docker-kubernetes/Kubernetes",title:"Kubernetes",description:"- K8s is the leading container orchestration tool (See Orchestrator in Docker.md)",source:"@site/docs/3-docker-kubernetes/Kubernetes.md",sourceDirName:"3-docker-kubernetes",slug:"/docker-kubernetes/Kubernetes",permalink:"/notes/docs/docker-kubernetes/Kubernetes",draft:!1,editUrl:"https://github.com/akormous/notes/edit/master/docs/3-docker-kubernetes/Kubernetes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Docker",permalink:"/notes/docs/docker-kubernetes/Docker"},next:{title:"Microservices",permalink:"/notes/docs/microservices/"}},s={},c=[{value:"What K8s CAN do",id:"what-k8s-can-do",level:2},{value:"What K8s CAN&#39;T do",id:"what-k8s-cant-do",level:2},{value:"Architecture",id:"architecture",level:2},{value:"<strong>Master Node / Control Plane</strong>",id:"master-node--control-plane",level:3},{value:"<strong>Worker Nodes</strong>",id:"worker-nodes",level:3},{value:"K8s Context",id:"k8s-context",level:2},{value:"K8s Namespace",id:"k8s-namespace",level:2},{value:"Pods",id:"pods",level:2},{value:"Init Containers",id:"init-containers",level:2},{value:"Labels",id:"labels",level:2},{value:"Selectors",id:"selectors",level:2},{value:"Multi-container pods",id:"multi-container-pods",level:2}],p={toc:c};function u(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kubernetes"},"Kubernetes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"K8s is the leading container orchestration tool (See Orchestrator in Docker.md)"),(0,r.kt)("li",{parentName:"ul"},"Designed as a loosely coupled collection of components centered around deploying, maintaining and scaling workloads"),(0,r.kt)("li",{parentName:"ul"},"Vendor-neutral, runs on all cloud providers")),(0,r.kt)("h2",{id:"what-k8s-can-do"},"What K8s CAN do"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Service discovery and load balancing"),(0,r.kt)("li",{parentName:"ul"},"Storage orchestration, local or cloud based"),(0,r.kt)("li",{parentName:"ul"},"Automated rollouts and rollbacks"),(0,r.kt)("li",{parentName:"ul"},"Self-healing"),(0,r.kt)("li",{parentName:"ul"},"Secret and configuration management"),(0,r.kt)("li",{parentName:"ul"},"Use the same API across on-premise and every cloud providers")),(0,r.kt)("h2",{id:"what-k8s-cant-do"},"What K8s CAN'T do"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Does not deploy source code"),(0,r.kt)("li",{parentName:"ul"},"Does not build your application"),(0,r.kt)("li",{parentName:"ul"},"Does not provide application-level services, message buses, databases, caches, etc.")),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Kubernetes Architecture",src:n(1798).Z,width:"1255",height:"585"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Nodes")," - A node is a physical or virtual machine"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cluster")," - A group of nodes forms a cluster")),(0,r.kt)("h3",{id:"master-node--control-plane"},(0,r.kt)("strong",{parentName:"h3"},"Master Node / Control Plane")),(0,r.kt)("p",null,"K8s services and controllers are located here. You don't run containers in master node."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"etcd")," - Key value data store that stores state of the cluster"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Not a database or a datastore for applications to use"),(0,r.kt)("li",{parentName:"ul"},"Single source of truth"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"kube-apiserver")," - The only component that communicates with etcd"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"REST interface"),(0,r.kt)("li",{parentName:"ul"},"Save state to the etcd datastore"),(0,r.kt)("li",{parentName:"ul"},"All clients interact with it, never directly to the datastore"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"kube-control-manager")," - controller of controllers, it runs controllers"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Node controller"),(0,r.kt)("li",{parentName:"ul"},"Replication controller"),(0,r.kt)("li",{parentName:"ul"},"Endpoints controller"),(0,r.kt)("li",{parentName:"ul"},"Service account and Token controllers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"cloud-control-manager")," - interact with the cloud providers controllers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"kube-scheduler")," - watches newly created pods that have no node assigned, and selects a node for them to run on"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Factors taken into account scheduling decisions include",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Individual and collective resouce requirements"),(0,r.kt)("li",{parentName:"ul"},"Hardware/software/policy constraints"),(0,r.kt)("li",{parentName:"ul"},"Affinity and anti-affinity specifications"),(0,r.kt)("li",{parentName:"ul"},"Data locality"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Addons")," - DNS, Web UI (dashboard), Cluster-level logging, Container resource monitoring"))),(0,r.kt)("h3",{id:"worker-nodes"},(0,r.kt)("strong",{parentName:"h3"},"Worker Nodes")),(0,r.kt)("p",null,"Nodes running the containers are called worker nodes. When a worker node is added to the cluster, some of the K8s services are added automatically, which are - "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"container runtime")," - K8s supports several container runtimes, must implement K8s Container Runtime Interface"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"kubelet")," - Manage the pods lifecycle, ensures that the containers described in the Pod specs are runninng and healthy"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"kube-proxy")," - a network proxy, manager network rules on nodes")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nodes Pool")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A node pool is a group of virtual machines, all with the same size"),(0,r.kt)("li",{parentName:"ul"},"A cluster can have multiple node pools",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"these pools can host different sizes of VMs"),(0,r.kt)("li",{parentName:"ul"},"Each pool can be autoscaled independently from the other pools"))),(0,r.kt)("li",{parentName:"ul"},"Docker desktop is limited to 1 node")),(0,r.kt)("h2",{id:"k8s-context"},"K8s Context"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A context is a group of access parameters to a K8s cluster"),(0,r.kt)("li",{parentName:"ul"},"Contains a Kubernetes cluster, a user, and a namespace"),(0,r.kt)("li",{parentName:"ul"},"The current context is the cluster that is currently the defaut for kubectl"),(0,r.kt)("li",{parentName:"ul"},"All kubectl commands run against that current context cluster")),(0,r.kt)("h2",{id:"k8s-namespace"},"K8s Namespace"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Allow to group resources. Ex: dev, test, prod"),(0,r.kt)("li",{parentName:"ul"},"K8s creates a default namespace"),(0,r.kt)("li",{parentName:"ul"},"Objects in one namespace can access objects in a different one, Ex: objectname.prod.svc.cluster.local"),(0,r.kt)("li",{parentName:"ul"},"Deleting a namespace will delete all its child objects"),(0,r.kt)("li",{parentName:"ul"},"Define a namespace, and specify that namespace when defining objects (pod, network policy, resource quota etc.)")),(0,r.kt)("h2",{id:"pods"},"Pods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Atomic unit of the smallest unit of work of K8s"),(0,r.kt)("li",{parentName:"ul"},"Encapsulates an application's container"),(0,r.kt)("li",{parentName:"ul"},"Represents a unit of deployment"),(0,r.kt)("li",{parentName:"ul"},"Pods can run one or more containers"),(0,r.kt)("li",{parentName:"ul"},"Containers within a pod share - IP address space, mounted volumes"),(0,r.kt)("li",{parentName:"ul"},"Containers within a pod can communicate via - localhost, IPC"),(0,r.kt)("li",{parentName:"ul"},"Pods are ephemeral"),(0,r.kt)("li",{parentName:"ul"},"Deploying a pod is an atomic operation, it succeeds or fails"),(0,r.kt)("li",{parentName:"ul"},"If a pod fails, it is replaced with a new one with a shiny new IP address"),(0,r.kt)("li",{parentName:"ul"},"You don't update a pod, you replace it with an updated version"),(0,r.kt)("li",{parentName:"ul"},"You scale by adding more pods, not more containers in a pod"),(0,r.kt)("li",{parentName:"ul"},"A node can run many pods, a pod can have multiple containers"),(0,r.kt)("li",{parentName:"ul"},"State of pod can be one of these - Pending, Running, Succeeded, Failed, Unknown, CrashLoopBackOff")),(0,r.kt)("h2",{id:"init-containers"},"Init Containers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initialize a pod before an application container runs"),(0,r.kt)("li",{parentName:"ul"},"This is great pattern for applications that have dependencies on some database or API that needs to be up and running before the application"),(0,r.kt)("li",{parentName:"ul"},"This keeps the infrastructure code out of the main logic"),(0,r.kt)("li",{parentName:"ul"},"These always run to completion"),(0,r.kt)("li",{parentName:"ul"},"There can be multiple init containers"),(0,r.kt)("li",{parentName:"ul"},"Each init container must complete successfully before the next one starts"),(0,r.kt)("li",{parentName:"ul"},"If it fails, the kubelet repeatedly restarts it until it succeeds",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Unless it's restart policy is set to never")))),(0,r.kt)("h2",{id:"labels"},"Labels"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"key-value pairs used to identify, describe and group related sets of objects or resources")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: v1\nkind: Pod\nmetadata:\n    name: myapp-pod\n    labels:\n        app: myapp\n        type: front-end\n    spec:\n        containers:\n        - name: nginx-container\n          image: nginx\n")),(0,r.kt)("h2",{id:"selectors"},"Selectors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Selectors use labels to filter or select objects"),(0,r.kt)("li",{parentName:"ul"},"For example, for the given pod definition, the pod will run on a ",(0,r.kt)("strong",{parentName:"li"},"node")," which has disk type: superfast (",(0,r.kt)("inlineCode",{parentName:"li"},"select * from nodes where disktype = superfast"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: v1\nkind: Pod\nmetadata:\n    name: myapp-pod\n    labels:\n        app: myapp\n        type: front-end\n    spec:\n        containers:\n        - name: nginx-container\n        nodeSelector:\n          disktype: superfast\n")),(0,r.kt)("h2",{id:"multi-container-pods"},"Multi-container pods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In a pod, multiple containers can run at once, usually there is a main container and an helper container"),(0,r.kt)("li",{parentName:"ul"},"There are some typical patterns in this scenario"),(0,r.kt)("li",{parentName:"ul"},"Sidecar pattern, Adapter pattern, Ambassador pattern")),(0,r.kt)("h1",{id:"networking-concepts"},"Networking Concepts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All containers within a pod can communicate with each other"),(0,r.kt)("li",{parentName:"ul"},"All pods can communicate with each other"),(0,r.kt)("li",{parentName:"ul"},"All nodes can communicate with all pods and nodes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Pods")," are given an ",(0,r.kt)("strong",{parentName:"li"},"ephemeral")," IP address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Services")," are given a ",(0,r.kt)("strong",{parentName:"li"},"persistent")," IP address")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Pod Networking",src:n(6648).Z,width:"1735",height:"919"}),"\n",(0,r.kt)("img",{alt:"Inter Pod Networking",src:n(5260).Z,width:"1726",height:"850"}),"\n",(0,r.kt)("img",{alt:"External Pod Networking",src:n(9761).Z,width:"1608",height:"908"})))}u.isMDXComponent=!0},9761:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ExternalPodCommunication-ec985f6b2f392cdbf79feeebfa3d3e32.png"},5260:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/InterPodCommunication-5a5499e06505657d7e06b66b6a8c07b6.png"},1798:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/K8sArchitecture-6cd4a8fb60598bafb5ae7f2319aab943.png"},6648:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/PodNetworking-c63fe76c18655a646f8c828991b2d9d9.png"}}]);