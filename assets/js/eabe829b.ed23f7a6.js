"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[4487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="The Facade Pattern",i={unversionedId:"design-patterns/structural/FacadePattern",id:"design-patterns/structural/FacadePattern",title:"The Facade Pattern",description:"There is no code example for this, as this is a pretty straightforward pattern. Look at the class diagram, its easy af. Just composition.",source:"@site/docs/1-design-patterns/structural/FacadePattern.md",sourceDirName:"1-design-patterns/structural",slug:"/design-patterns/structural/FacadePattern",permalink:"/notes/docs/design-patterns/structural/FacadePattern",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-design-patterns/structural/FacadePattern.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Decorator Pattern",permalink:"/notes/docs/design-patterns/structural/DecoratorPattern"},next:{title:"The Strategy Pattern",permalink:"/notes/docs/design-patterns/structural/StrategyPattern"}},l={},c=[{value:"Theory",id:"theory",level:2},{value:"Principle of Least Knowledge - <strong>talk only to your immediate friends</strong>",id:"principle-of-least-knowledge---talk-only-to-your-immediate-friends",level:2},{value:"Key points",id:"key-points",level:2},{value:"Class Diagram",id:"class-diagram",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-facade-pattern"},"The Facade Pattern"),(0,r.kt)("p",null,"There is no code example for this, as this is a pretty straightforward pattern. Look at the class diagram, its easy af. Just composition."),(0,r.kt)("h2",{id:"theory"},"Theory"),(0,r.kt)("p",null,"The Facade Pattern provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that ",(0,r.kt)("strong",{parentName:"p"},"makes the subsystem easier to use"),"."),(0,r.kt)("p",null,"It avoids tight coupling between clients and subsystems. It also helps to adhere to a OO principle."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"principle-of-least-knowledge---talk-only-to-your-immediate-friends"},"Principle of Least Knowledge - ",(0,r.kt)("strong",{parentName:"h2"},"talk only to your immediate friends")),(0,r.kt)("p",null,"It means when you are desiging a system, for any object, be careful of the number of classes it iteracts with and also how it comes to interact with those classes."),(0,r.kt)("p",null,"This principle prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascade to other parts. A lot of interdependencies between classes, makes the system fragile and costly to maintain."),(0,r.kt)("p",null,"For example. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"float getTemp() {\n    return station.getThermometer().getTemperature();\n}\n")),(0,r.kt)("p",null,"This is a bad design, since, any change in the ",(0,r.kt)("inlineCode",{parentName:"p"},"getTemperature()")," method of ",(0,r.kt)("inlineCode",{parentName:"p"},"Temperature")," class, cascades to this method. The coupling is too tight."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"key-points"},"Key points"),(0,r.kt)("p",null,"How to actually use the principle of least knowledge?"),(0,r.kt)("p",null,"Take any object; now from any method in that object, the principle tells us that we should only invoke methods that belong to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The object itself"),(0,r.kt)("li",{parentName:"ul"},"Objects passed in as a perameter to the method"),(0,r.kt)("li",{parentName:"ul"},"Any object the method creates or instantiates"),(0,r.kt)("li",{parentName:"ul"},"Any components of the object")),(0,r.kt)("p",null,"So a good design for the above ",(0,r.kt)("inlineCode",{parentName:"p"},"getTemp()")," method would be: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"float getTemp() {\n    return station.getTemperature();\n}\n")),(0,r.kt)("h2",{id:"class-diagram"},"Class Diagram"),(0,r.kt)("mermaid",{value:'classDiagram\n\nclass Client\nclass HomeTheater {\n    // FACADE\n    TV tv\n    Lights light\n    PopcornMaker pm\n}\n\nClient "interacts with" --\x3e HomeTheater\nclass Netflix {\n    void login()\n    void search()\n    void play(string movie)\n}\n\nclass TV {\n    Netflix netflix;\n    DolbySoundSystem speakers;\n}\n\nclass DolbySoundSystem {\n    void setSurroundSound()\n    void setEqualizer()\n    void setVolume(int level)\n}\n\nclass Lights {\n    void dim()\n    void setColor()\n}\n\nclass PopcornMaker {\n    void start()\n    void stop()\n}\n\nTV "composed" --\x3eNetflix\nTV "composed" --\x3e DolbySoundSystem\n\nHomeTheater --\x3e TV\nHomeTheater --\x3e Lights\nHomeTheater --\x3e PopcornMaker\n'}))}u.isMDXComponent=!0}}]);