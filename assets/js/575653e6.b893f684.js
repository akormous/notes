"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[6911],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>b});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(a),d=n,b=p["".concat(s,".").concat(d)]||p[d]||c[d]||i;return a?r.createElement(b,o(o({ref:t},m),{},{components:a})):r.createElement(b,o({ref:t},m))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6269:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=a(7462),n=(a(7294),a(3905));const i={},o="Dynamic Programming",l={unversionedId:"dsa/DynamicProgramming",id:"dsa/DynamicProgramming",title:"Dynamic Programming",description:"It is an optimization over plain recursion. If there is a recursive solution that has repeated calls for same inputs, it can be optimized using Dynamic Programming.",source:"@site/docs/2-dsa/DynamicProgramming.md",sourceDirName:"2-dsa",slug:"/dsa/DynamicProgramming",permalink:"/notes/docs/dsa/DynamicProgramming",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-dsa/DynamicProgramming.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Concurrency",permalink:"/notes/docs/dsa/Concurrency"},next:{title:"Math and Logic Puzzles",permalink:"/notes/docs/dsa/MathAndLogic"}},s={},u=[{value:"1. Overlapping Subproblems",id:"1-overlapping-subproblems",level:2},{value:"2. Optimal Substructure",id:"2-optimal-substructure",level:2},{value:"1. Make it work",id:"1-make-it-work",level:2},{value:"2. Make it efficient",id:"2-make-it-efficient",level:2}],m={toc:u};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dynamic-programming"},"Dynamic Programming"),(0,n.kt)("p",null,"It is an optimization over plain recursion. If there is a recursive solution that has repeated calls for same inputs, it can be optimized using Dynamic Programming."),(0,n.kt)("p",null,"This simple optimization reduces the time complexities from exponential to polynomial."),(0,n.kt)("p",null,"The two main properties of a problem that suggests Dynamic Programming can be applied on it are:"),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"1-overlapping-subproblems"},"1. Overlapping Subproblems"),(0,n.kt)("p",null,"Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. It is mainly used when solutions to subproblems are needed again and again. Here, computed solutions to subproblems are stored in a table so that these don't have to be recomputed."),(0,n.kt)("p",null,"There are 2 ways of storing the results of subproblems"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Memoization (Top Down)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A lookup array with all values as NIL is initialized"),(0,n.kt)("li",{parentName:"ul"},"Whenever we need a solution to a subproblem, we first look into the lookup table"),(0,n.kt)("li",{parentName:"ul"},"If precomputed value is there then it is returned, otherwise, the value is calculated and stored in the lookup table"),(0,n.kt)("li",{parentName:"ul"},"Table is filled on demand"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Tabulation (Bottom Up)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"It builds the table in a bottom-up fashion and returns the last entry from the table"),(0,n.kt)("li",{parentName:"ul"},"Table is filled from the first entry till last"))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"2-optimal-substructure"},"2. Optimal Substructure"),(0,n.kt)("p",null,"A problem has an Optimal Substructure property if optimal solution of the problems can be obtained by using optimal solutions of its subproblems."),(0,n.kt)("p",null,"For example, shortest path in a graph,\nIf a node ",(0,n.kt)("em",{parentName:"p"},"x")," lies in the shortest path from a source node ",(0,n.kt)("em",{parentName:"p"},"a")," to destination node ",(0,n.kt)("em",{parentName:"p"},"b")," , then the shortest path from ",(0,n.kt)("em",{parentName:"p"},"a")," to ",(0,n.kt)("em",{parentName:"p"},"b")," is the combination of shortest path from ",(0,n.kt)("em",{parentName:"p"},"a")," to ",(0,n.kt)("em",{parentName:"p"},"x")," and shortest path from ",(0,n.kt)("em",{parentName:"p"},"x")," to ",(0,n.kt)("em",{parentName:"p"},"b")," "),(0,n.kt)("h1",{id:"memoization-recipe"},"Memoization Recipe"),(0,n.kt)("h2",{id:"1-make-it-work"},"1. Make it work"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"visualize the problem as a tree"),(0,n.kt)("li",{parentName:"ul"},"implement the tree using recursion"),(0,n.kt)("li",{parentName:"ul"},"test it")),(0,n.kt)("h2",{id:"2-make-it-efficient"},"2. Make it efficient"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"add a memo object (cache)"),(0,n.kt)("li",{parentName:"ul"},"add a base case to return memo values"),(0,n.kt)("li",{parentName:"ul"},"store return values into the memo")),(0,n.kt)("h1",{id:"tabulation-recipe"},"Tabulation Recipe"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"visualize the problem as a table"),(0,n.kt)("li",{parentName:"ul"},"size of the table depends on the inputs"),(0,n.kt)("li",{parentName:"ul"},"initialize the table with default values"),(0,n.kt)("li",{parentName:"ul"},"seed the trivial answer into the table"),(0,n.kt)("li",{parentName:"ul"},"iterate through the table"),(0,n.kt)("li",{parentName:"ul"},"fill further positions based on the current position")))}p.isMDXComponent=!0}}]);