"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[9746],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),l=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),m=n,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[d]="string"==typeof e?e:n,o[1]=c;for(var l=2;l<s;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1418:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const s={},o="The Adapter Pattern",c={unversionedId:"design-patterns/structural/AdapterPattern",id:"design-patterns/structural/AdapterPattern",title:"The Adapter Pattern",description:"C++ Project Example",source:"@site/docs/1-design-patterns/structural/AdapterPattern.md",sourceDirName:"1-design-patterns/structural",slug:"/design-patterns/structural/AdapterPattern",permalink:"/notes/docs/design-patterns/structural/AdapterPattern",draft:!1,editUrl:"https://github.com/akormous/notes/edit/master/docs/1-design-patterns/structural/AdapterPattern.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structural Patterns",permalink:"/notes/docs/design-patterns/structural/"},next:{title:"The Decorator Pattern",permalink:"/notes/docs/design-patterns/structural/DecoratorPattern"}},i={},l=[{value:"C++ Project Example",id:"c-project-example",level:2},{value:"Theory",id:"theory",level:2},{value:"Object and Class Adapters",id:"object-and-class-adapters",level:2},{value:"Class Diagram",id:"class-diagram",level:2}],p={toc:l};function d(e){let{components:t,...s}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"the-adapter-pattern"},"The Adapter Pattern"),(0,n.kt)("h2",{id:"c-project-example"},"C++ Project Example"),(0,n.kt)("p",null,"Link: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/akormous/design-patterns/tree/main/Code/AdapterPattern/"},"Turkey and Duck")),(0,n.kt)("h2",{id:"theory"},"Theory"),(0,n.kt)("p",null,"The Adapter Pattern converts the interface of a class into another interface the clients expect. Adapter lets clases work together that couldn't otherwise because of incompatible interfaces."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Adapter Pattern",src:r(808).Z,width:"856",height:"687"})),(0,n.kt)("h2",{id:"object-and-class-adapters"},"Object and Class Adapters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Object Adapters"),": The Adapter class is composed with the object of Adaptee"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Class Adapters"),": The Adapter class subclasses both the Target and Adaptee interfaces")),(0,n.kt)("h2",{id:"class-diagram"},"Class Diagram"),(0,n.kt)("mermaid",{value:'classDiagram\n\nclass Target {\n    void request()\n}\n\nclass Adaptee {\n    void specificRequest()\n}\n\nclass ClientGame {\n    // main.cpp\n}\n\nclass Adapter {\n    Adaptee adaptee\n    void request()\n}\n\nClientGame "interacts with" --\x3e Target\nAdapter "implements" ..> Target\nAdapter "composition" --\x3e Adaptee\n'}))}d.isMDXComponent=!0},808:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/AdapterPattern-9bfb5262559371d84582c8744e74884a.png"}}]);